/************************************************************************
 * @description Gdip_PixelSearch.ahk by ninju
 * @author ninju | .ninju.
 * @date 2024/10/21
 * @version 1.0.1
 ***********************************************************************/

/**
 * Gdip_PixelSearch
 * @param pBMHaystack [in] a pointer to a bitmap to search in
 * @param color [in] an integer ARGB color value to search for
 * @param x [in,out, optional] in: the x-coordinate of the starting point, out: the x-coordinate of the found pixel
 * @param y [in,out, optional] in: the y-coordinate of the starting point, out: the y-coordinate of the found pixel
 * @param w [in, optional] the width of the area to search in
 * @param h [in, optional] the height of the area to search in
 * @param {Integer} variation [in, optional] the maximum variation in color (0-255)
 * @param {Integer} SearchDirection [in, optional, default: 1] the direction to search in:
 * 1: top to bottom, left to right (default)
 * 2: top to bottom, right to left
 * 3: bottom to top, left to right
 * 4: bottom to top, right to left
 * @returns {Integer}:
 * 0: pixel not found
 * 1: pixel found
 * -1001: invalid bitmap
 * -1002: invalid coordinates or dimensions
 * -1003: invalid variation
 * -1004 / -1: invalid search direction
 * -1005: error locking bits
 */
Gdip_PixelSearch(pBMHaystack, color, &x?, &y?, w?, h?, variation := 0, SearchDirection := 1) {
    static mcode := 
    (Join
    '
    4157415641554154555756534883EC288B8424B0000000488B9C2498000000448BBC24A80000004989CE89D1488B9424A000000085C00F855C0100008B324585FF0F84B902000089C889
    CF440FB6D1C1E818C1EF10448954241489442418400FB6FF0FB6C54139F10F8E120100008BAC24900000004189C44529FA4401F8894424044189FB448B2B4401FF0FAFEE448954241045
    29FB4529FC44898C248800000048899424A00000004489FA4D89F74989DE4539E80F8E9F00000085ED8D450344896C24084D63CD0F49C5896C240CC1F80248984D8D14870F1F84000000
    0000438B1C8A4489C839CB0F848102000089DDC1ED10400FB6ED4139EB7F4B39EF7C470FB6EF4139EC7F3F396C24047C390FB6EB396C24107F30448B6C24144101D54139ED7C23448B6C
    2418C1EB1889DD4489EB29D339EB7F10428D1C2A39EB0F8D2C0200000F1F40004983C1014539C87F8F448B6C24088B6C240C83C60103AC249000000039B424880000000F8541FFFFFF48
    8B9424A00000004C89F30F1F4000C703FFFFFFFF4531D2C702FFFFFFFFE9560100000F1F400083F8010F84DF01000083F8020F844602000041BAFFFFFFFF83F8030F85310100008B2A41
    8D71FF4585FF0F848305000089C84189CB440FB6C9C1E81841C1EB1044894C24188944241C450FB6DB0FB6C539F57F948BBC24900000004189C54529F94401F8894424044589DA458D60
    FF448B030FAFFE44894C24104529FA4501FB896C24144529FD4889D54489BC24A80000004989DF4539E00F8F9305000085FF8D470344896424084963D40F49C7897C240CC1F80248984D
    8D0C86EB780F1F0089DFC1EF10400FB6FF4139FA7F5A4139FB7C550FB6FF4139FD7F4D397C24047C470FB6FB397C24107F3E448B6424184403A424A80000004139FC7C2C448B64241C89
    DFC1EF184489E32B9C24A800000039FB7F148B9C24A80000004401E339FB7D1D660F1F4400004883EA014139D00F8FF3040000418B1C9189D039CB75814C89FB4889EA0F1F00890341BA
    0100000089324489D04883C4285B5E5F5D415C415D415E415FC366904139F10F8E77FEFFFF448B9C24900000008B3B440FAFDE4139F87E3C4585DB458D53034863C7450F49D341C1FA02
    4D63D24F8D1496EB12660F1F8400000000004883C0014139C07E0F41390C8275F1EB8F0F1F800000000083C60144039C24900000004139F175AFE913FEFFFF0F1F00488B9424A0000000
    4C89F3E960FFFFFF8B324585FF0F85D50000004139F10F8EECFDFFFF8BBC2490000000448B134183E8010FAFFE4539C20F8F0202000085FF448D5F034963C0440F49DF41C1FB024D63DB
    4F8D1C9EEB150F1F8400000000004883E8014139C20F8FD301000041390C8375EDE9F8FEFFFF0F1F840000000000448B22418D71FF4585FF0F85DB0100004139F40F8F77FDFFFF448B94
    2490000000448B1B440FAFD64539D80F8EFF0200004585D2458D4A034963C3450F49CA41C1F9024D63C94F8D0C8EEB110F1F40004883C0014139C00F8ED302000041390C8175EDE988FE
    FFFF0F1F84000000000089C889CF440FB6D1C1E818C1EF10448954241489442418400FB6FF0FB6C54139F10F8EF9FCFFFF8BAC24900000004189C54401F84529FA894424044189FB458D
    60FF448B030FAFEE44895424104529FB4401FF44898C24880000004529FD4989D24489BC24A80000004989DF4539E00F8FB100000085ED8D450344896424084963D40F49C5896C240CC1
    F80248984D8D0C86660F1F440000418B1C9189D039CB0F84CA00000089DDC1ED10400FB6ED4139EB7F5C39EF7C580FB6EF4139ED7F50396C24047C4A0FB6EB396C24107F41448B642414
    4403A424A80000004139EC7C2F448B642418C1EB1889DD4489E32B9C24A800000039EB7F178B9C24A80000004401E339EB7D69660F1F8400000000004883EA014139D00F8E7BFFFFFF44
    8B6424088B6C240C83C60103AC249000000039B424880000000F852FFFFFFF4C89FB4C89D2E9D8FBFFFF0F1F84000000000083C60103BC24900000004139F10F85E2FDFFFFE9B8FBFFFF
    0F1F8400000000004C89FB4C89D2E905FDFFFF89C84189CB440FB6C9C1E81841C1EB1044894C24188944241C450FB6DB0FB6C54139F40F8F7CFBFFFF8BBC249000000089C54529F94401
    F8894424044589DA448B2B4501FB0FAFFE44894C24104529FA4429FD44896424144989D44489BC24A80000004989DF4539E80F8EAC00000085FF8D470344896C24084963D50F49C7897C
    240CC1F80248984D8D0C86660F1F840000000000418B1C9189D039CB0F84C200000089DFC1EF10400FB6FF4139FA7F544139FB7C4F0FB6FF39FD7F48397C24047C420FB6FB397C24107F
    39448B6C24184403AC24A80000004139FD7C27448B6C241C89DFC1EF184489EB2B9C24A800000039FB7F0F8B9C24A80000004401EB39FB7D61904883C2014139D00F8F83FFFFFF448B6C
    24088B7C240C8B44241483EE012BBC249000000039C60F8D35FFFFFF4C89FB4C89E2E969FAFFFF660F1F84000000000083EE01442B9424900000004439E60F8DE4FCFFFFE947FAFFFF0F
    1F80000000004C89FB4C89E2E995FBFFFF39F50F8F2DFAFFFF448B9C2490000000448B0B4183E801440FAFDE4539C17F394585DB458D53034963C0450F49D341C1FA024D63D24F8D1496
    EB13662E0F1F8400000000004883E8014139C17F0B41390C8275F1E93CFBFFFF83EE01442B9C249000000039EE7DB3E9C8F9FFFF0F1F840000000000448B6424088B7C240C8B44241483
    EE012BBC249000000039C60F8D4EFAFFFF4C89FB4889EAE996F9FFFF
    '
    )
    if !pBMHaystack
        return -1001
    Gdip_GetImageDimensions(pBMHaystack, &width, &height)
    if width < (w ?? width) || height < (h ?? height) || (w ?? width) < 0 || (h ?? height) < 0 || (IsSet(x) && x < 0) || (IsSet(y) && y < 0)
        return -1002
    if (variation < 0 || variation > 255)
        return -1003
    if (SearchDirection > 3 || SearchDirection < 0)
        return -1004
    if Gdip_LockBits(pBMHaystack, 0, 0, width, height, &hstride, &hscan, &hBitmapData, 1)
        return -1005
    len := StrLen(mcode) // 2
    hGlobal := DllCall("GlobalAlloc", "uint", 0x42, "uint", len)
    pGlobal := DllCall("GlobalLock", "ptr", hGlobal)
    loop len
        NumPut("uchar", ("0x" SubStr(mcode, A_Index * 2 - 1, 2)), pGlobal, A_Index - 1)
    DllCall("VirtualProtect", "ptr", pGlobal, "ptr", len, "uint", 0x40, "uint*", 0)
    if !IsSet(x)
        x := 0
    if !IsSet(y)
        y := 0
    if isSet(w)
        w := x + w
    if isSet(h)
        h := y + h
    out := DllCall(pGlobal, "uint", hscan, "uint", color, "int", w ?? width, "int", h ?? height, "int", hstride, "intp", &x, "intp", &y, "uint", variation, "uint", SearchDirection)
    Gdip_UnlockBits(pBMHaystack, &hBitmapData)
    return out
}